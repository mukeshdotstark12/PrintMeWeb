<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Kentico.Membership</name>
    </assembly>
    <members>
        <member name="T:Kentico.Membership.EmailService">
            <summary>
            Exposes method for sending messages to users using email.
            </summary>
        </member>
        <member name="M:Kentico.Membership.EmailService.SendAsync(Microsoft.AspNet.Identity.IdentityMessage)">
            <summary>
            Sends the given message (email).
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="M:Kentico.Membership.EmailService.CreateEmailMessage(Microsoft.AspNet.Identity.IdentityMessage)">
            <summary>
            Creates new instance of <see cref="T:CMS.EmailEngine.EmailMessage"/> from the
            instance of <see cref="T:Microsoft.AspNet.Identity.IdentityMessage"/>.
            </summary>
            <param name="message">Instance of <see cref="T:Microsoft.AspNet.Identity.IdentityMessage"/>.</param>
        </member>
        <member name="T:Kentico.Membership.Internal.MembershipEvents">
            <summary>
            Membership events.
            </summary>
        </member>
        <member name="F:Kentico.Membership.Internal.MembershipEvents.RegistrationCompleted">
            <summary>
            Fires when registration of the user is completed.
            </summary>
        </member>
        <member name="T:Kentico.Membership.Internal.RegistrationCompletedEventArgs">
            <summary>
            Event arguments used for <see cref="F:Kentico.Membership.Internal.MembershipEvents.RegistrationCompleted"/> event.
            </summary>
        </member>
        <member name="P:Kentico.Membership.Internal.RegistrationCompletedEventArgs.User">
            <summary>
            Returns an <see cref="T:CMS.Membership.UserInfo" /> of the user who completed the registration process.
            </summary>
        </member>
        <member name="M:Kentico.Membership.Internal.RegistrationCompletedEventArgs.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Kentico.Membership.Internal.RegistrationCompletedEventArgs"/>.
            </summary>
        </member>
        <member name="M:Kentico.Membership.Internal.RegistrationCompletedEventArgs.#ctor(CMS.Membership.UserInfo)">
            <summary>
            Initializes a new instance of <see cref="T:Kentico.Membership.Internal.RegistrationCompletedEventArgs"/> with given <paramref name="user"/>.
            </summary>
            <param name="user">Registered user.</param>
        </member>
        <member name="T:Kentico.Membership.Internal.RegistrationCompletedHandler">
            <summary>
            Represents a handler that handles the user registration event.
            </summary>
        </member>
        <member name="M:Kentico.Membership.Internal.RegistrationCompletedHandler.StartEvent(CMS.Membership.UserInfo)">
            <summary>
            Initiates the event handling.
            </summary>
            <param name="userInfo"><see cref="T:CMS.Membership.UserInfo" /> representing registered user.</param>
        </member>
        <member name="T:Kentico.Membership.Internal.RegistrationHelper">
            <summary>
            Encapsulates helper methods for userÂ registration.
            </summary>
        </member>
        <member name="M:Kentico.Membership.Internal.RegistrationHelper.RegisterUser(CMS.Membership.UserInfo)">
            <summary>
            Registers a new user.
            </summary>
            <param name="user">User to be registered.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="user"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="user"/> already exists. Method is to be used only for creating a new user.</exception>
            <remarks>Rises <see cref="F:Kentico.Membership.Internal.MembershipEvents.RegistrationCompleted"/> event when registration proccess has been completed and user is <see cref="P:CMS.Membership.UserInfo.Enabled"/>.</remarks>
        </member>
        <member name="M:Kentico.Membership.Internal.RegistrationHelper.RegisterUserInternal(CMS.Membership.UserInfo)">
            <summary>
            Registers a new user.
            </summary>
            <param name="user">User to be registered.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="user"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="user"/> already exists. Method is to be used only for creating a new user.</exception>
            <remarks>Rises <see cref="F:Kentico.Membership.Internal.MembershipEvents.RegistrationCompleted"/> event when registration proccess has been completed and user is <see cref="P:CMS.Membership.UserInfo.Enabled"/>.</remarks>
        </member>
        <member name="T:Kentico.Membership.EmailConfirmationExtensionDefinition">
            <summary>
            Describes configuration for registration email confirmation extension.
            </summary>
        </member>
        <member name="P:Kentico.Membership.EmailConfirmationExtensionDefinition.BeforeConfirmationSentAction">
            <summary>
            This action is invoked before the registration confirmation email is sent.
            </summary>
            <remarks>Gets ID of registered user as parameter.</remarks>
        </member>
        <member name="P:Kentico.Membership.EmailConfirmationExtensionDefinition.EmailConfirmedAction">
            <summary>
            This action is invoked when the registration email is successfully confirmed.
            </summary>
            <remarks>Gets ID of registered user as parameter.</remarks>
        </member>
        <member name="M:Kentico.Membership.EmailConfirmationExtensionDefinition.#ctor(System.Action{System.Int32},System.Action{System.Int32})">
            <summary>
            Initializes a new instance of <see cref="T:Kentico.Membership.EmailConfirmationExtensionDefinition"/>.
            </summary>
            <param name="beforeConfirmationSentAction">Action which is invoked before the registration confirmation email is sent</param>
            <param name="emailConfirmedAction">Action which is invoked when the registration email is successfully confirmed</param>
        </member>
        <member name="T:Kentico.Membership.EmailConfirmationExtensionDefinitionRegister">
            <summary>
            Register for actions extending registration email confirmation feature.
            </summary>
        </member>
        <member name="P:Kentico.Membership.EmailConfirmationExtensionDefinitionRegister.Instance">
            <summary>
            Gets the <see cref="T:Kentico.Membership.EmailConfirmationExtensionDefinitionRegister"/> instance.
            </summary>
        </member>
        <member name="P:Kentico.Membership.EmailConfirmationExtensionDefinitionRegister.Items">
            <summary>
            Gets all registered instances of <see cref="T:Kentico.Membership.EmailConfirmationExtensionDefinition"/>.
            </summary>
        </member>
        <member name="M:Kentico.Membership.EmailConfirmationExtensionDefinitionRegister.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Kentico.Membership.EmailConfirmationExtensionDefinitionRegister"/>.
            </summary>
        </member>
        <member name="M:Kentico.Membership.EmailConfirmationExtensionDefinitionRegister.Register(Kentico.Membership.EmailConfirmationExtensionDefinition)">
            <summary>
            Registers given <paramref name="definition"/> to the system.
            </summary>
            <param name="definition">Instance of <see cref="T:Kentico.Membership.EmailConfirmationExtensionDefinition"/> to be registered.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when null <paramref name="definition"/> is provided.</exception>
        </member>
        <member name="T:Kentico.Membership.Role">
            <summary>
            Application identity role.
            </summary>
        </member>
        <member name="P:Kentico.Membership.Role.Id">
            <summary>
            Role ID.
            </summary>
        </member>
        <member name="P:Kentico.Membership.Role.Name">
            <summary>
            Role name.
            </summary>
        </member>
        <member name="P:Kentico.Membership.Role.DisplayName">
            <summary>
            Role display name.
            </summary>
        </member>
        <member name="M:Kentico.Membership.Role.#ctor(CMS.Membership.RoleInfo)">
            <summary>
            Creates a new instance of <see cref="T:Kentico.Membership.Role"/> based on <see cref="T:CMS.Membership.RoleInfo"/>.
            </summary>
            <param name="roleInfo">Role info (CMS entity).</param>
        </member>
        <member name="M:Kentico.Membership.Role.#ctor">
            <summary>
            Creates empty role.
            </summary>
        </member>
        <member name="T:Kentico.Membership.RoleStore">
            <summary>
            Identity role store implementation.
            </summary>
        </member>
        <member name="M:Kentico.Membership.RoleStore.Dispose">
            <summary>
            Performs tasks to dispose the role store.
            </summary>
        </member>
        <member name="M:Kentico.Membership.RoleStore.FindByIdAsync(System.Int32)">
            <summary>
            Returns instance of <see cref="T:Kentico.Membership.Role"/>.
            </summary>
            <param name="roleId">ID of the role.</param>
        </member>
        <member name="M:Kentico.Membership.RoleStore.FindByNameAsync(System.String)">
            <summary>
            Returns instance of <see cref="T:Kentico.Membership.Role"/>.
            </summary>
            <param name="roleName">Name of role.</param>
        </member>
        <member name="M:Kentico.Membership.RoleStore.CreateAsync(Kentico.Membership.Role)">
            <summary>
            Stores <see cref="T:Kentico.Membership.Role"/> in the database.
            </summary>
            <param name="role">Role.</param>
        </member>
        <member name="M:Kentico.Membership.RoleStore.DeleteAsync(Kentico.Membership.Role)">
            <summary>
            Deletes <see cref="T:Kentico.Membership.Role"/> from the database.
            </summary>
            <param name="role">Role.</param>
        </member>
        <member name="M:Kentico.Membership.RoleStore.UpdateAsync(Kentico.Membership.Role)">
            <summary>
            Updates <see cref="T:Kentico.Membership.Role"/> in the database.
            </summary>
            <param name="role">Role.</param>
        </member>
        <member name="T:Kentico.Membership.KenticoSignInManager`1">
            <summary>
            <para>
            Manages sign in operations for users.
            </para>
            <para>
            This class was added in hotfix 34 (version 12.0.34). Do not use this class when writing hotfix independent code.
            </para>
            </summary>
        </member>
        <member name="M:Kentico.Membership.KenticoSignInManager`1.#ctor(Kentico.Membership.KenticoUserManager{`0},Microsoft.Owin.Security.IAuthenticationManager)">
            <summary>
            Creates the instance of <see cref="T:Kentico.Membership.KenticoSignInManager`1"/>.
            </summary>
            <param name="userManager">User manager.</param>
            <param name="authenticationManager">Authentication manager.</param>
        </member>
        <member name="M:Kentico.Membership.KenticoSignInManager`1.Create(Microsoft.AspNet.Identity.Owin.IdentityFactoryOptions{Kentico.Membership.KenticoSignInManager{`0}},Microsoft.Owin.IOwinContext)">
            <summary>
            Factory method that creates the <see cref="T:Kentico.Membership.KenticoSignInManager`1"/> instance.
            </summary>
            <param name="options">Identity factory options.</param>
            <param name="context">OWIN context.</param>
        </member>
        <member name="T:Kentico.Membership.SignInManager">
            <summary>
            Manages sign in operations for users.
            </summary>
        </member>
        <member name="M:Kentico.Membership.SignInManager.#ctor(Kentico.Membership.UserManager,Microsoft.Owin.Security.IAuthenticationManager)">
            <summary>
            Manages sign in operations for users.
            </summary>
        </member>
        <member name="M:Kentico.Membership.SignInManager.Create(Microsoft.AspNet.Identity.Owin.IdentityFactoryOptions{Kentico.Membership.SignInManager},Microsoft.Owin.IOwinContext)">
            <summary>
            Factory method that creates the <see cref="T:Kentico.Membership.SignInManager"/> instance.
            </summary>
            <param name="options">Identity factory options.</param>
            <param name="context">OWIN context.</param>
        </member>
        <member name="T:Kentico.Membership.User">
            <summary>
            Representation of user identity.
            </summary>
        </member>
        <member name="P:Kentico.Membership.User.Id">
            <summary>
            User ID.
            </summary>
        </member>
        <member name="P:Kentico.Membership.User.UserName">
            <summary>
            User name.
            </summary>
        </member>
        <member name="P:Kentico.Membership.User.FirstName">
            <summary>
            First name.
            </summary>
        </member>
        <member name="P:Kentico.Membership.User.LastName">
            <summary>
            Last name.
            </summary>
        </member>
        <member name="P:Kentico.Membership.User.Email">
            <summary>
            Email.
            </summary>
        </member>
        <member name="P:Kentico.Membership.User.PasswordHash">
            <summary>
            Password hash.
            </summary>
        </member>
        <member name="P:Kentico.Membership.User.Enabled">
            <summary>
            Indicates if the user is enabled.
            This represents the lockout notion in ASP.NET Identity.
            </summary>
        </member>
        <member name="P:Kentico.Membership.User.GUID">
            <summary>
            Guid.
            </summary>
        </member>
        <member name="P:Kentico.Membership.User.SecurityStamp">
            <summary>
            A unique value that should change whenever user credentials have changed, e.g.:
            password reset, external login removal, etc. 
            </summary>
        </member>
        <member name="P:Kentico.Membership.User.Roles">
            <summary>
            Roles of the user.
            </summary>
        </member>
        <member name="P:Kentico.Membership.User.IsExternal">
            <summary>
            Indicates that the user can be logged in only through an external authentication provider.
            </summary>
        </member>
        <member name="M:Kentico.Membership.User.#ctor(CMS.Membership.UserInfo)">
            <summary>
            Creates new user from <see cref="T:CMS.Membership.UserInfo"/>.
            </summary>
            <param name="userInfo">User info (CMS entity).</param>
        </member>
        <member name="M:Kentico.Membership.User.#ctor">
            <summary>
            Creates empty user.
            </summary>
        </member>
        <member name="M:Kentico.Membership.User.MapFromUserInfo(CMS.Membership.UserInfo)">
            <summary>
            <para>
            Maps <see cref="T:CMS.Membership.UserInfo"/> properties to the <see cref="T:Kentico.Membership.User"/> instance.
            </para>
            <para>
            This member was added in hotfix 34 (version 12.0.34). Do not use this member when writing hotfix independent code.
            </para>
            </summary>
            <param name="source">Source object.</param>
        </member>
        <member name="M:Kentico.Membership.User.MapToUserInfo(CMS.Membership.UserInfo)">
            <summary>
            <para>
            Maps <see cref="T:Kentico.Membership.User"/> properties to the <see cref="T:CMS.Membership.UserInfo"/> instance.
            </para>
            <para>
            This member was added in hotfix 34 (version 12.0.34). Do not use this member when writing hotfix independent code.
            </para>
            </summary>
            <param name="target">Target object.</param>
        </member>
        <member name="M:Kentico.Membership.User.IsNewUser(CMS.Membership.UserInfo)">
            <summary>
            Determines whether the user is new or existing.
            </summary>
            <param name="target">The <see cref="T:CMS.Membership.UserInfo"/> to check whether it is new or existing.</param>
            <returns>
              <c>true</c> if <paramref name="target"/> is a new <c>UserInfo</c> (i.e. it has UserID set to <c>0</c>; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Kentico.Membership.User.FullNameWasAutomaticallyGenerated(CMS.Membership.UserInfo)">
            <summary>
            Determines whether the <code>UserInfo.FullName</code> property was automatically generated (= is equals to first + last name)
            </summary>
            <param name="target">The <see cref="T:CMS.Membership.UserInfo"/> to check the FullName of.</param>
            <returns></returns>
        </member>
        <member name="T:Kentico.Membership.KenticoUserManager`1">
            <summary>
            <para>
            Exposes user related API which will automatically save changes to the <see cref="T:Kentico.Membership.KenticoUserStore`1"/>.
            </para>
            <para>
            This class was added in hotfix 34 (version 12.0.34). Do not use this class when writing hotfix independent code.
            </para>
            </summary>
        </member>
        <member name="M:Kentico.Membership.KenticoUserManager`1.#ctor(Microsoft.AspNet.Identity.IUserStore{`0,System.Int32})">
            <summary>
            Creates a new instance of <see cref="T:Kentico.Membership.KenticoUserManager`1"/>.
            </summary>
            <param name="store">User store.</param>
        </member>
        <member name="M:Kentico.Membership.KenticoUserManager`1.Initialize``1(Owin.IAppBuilder,``0)">
            <summary>
            Factory method that creates the user manager with <see cref="T:Kentico.Membership.KenticoUserStore`1"/>.
            </summary>
            <param name="app">Application builder.</param>
            <param name="manager">Manager to be initialized.</param>
        </member>
        <member name="M:Kentico.Membership.KenticoUserManager`1.UpdatePassword(Microsoft.AspNet.Identity.IUserPasswordStore{`0,System.Int32},`0,System.String)">
            <summary>
            Updates the user password.
            </summary>
            <param name="passwordStore">Unused implementation of UserPasswordStore.</param>
            <param name="user">User.</param>
            <param name="newPassword">New password in plain text format.</param>
        </member>
        <member name="M:Kentico.Membership.KenticoUserManager`1.VerifyPasswordAsync(Microsoft.AspNet.Identity.IUserPasswordStore{`0,System.Int32},`0,System.String)">
            <summary>
            Verifies the user password.
            </summary>
            <param name="store">Unused implementation of UserPasswordStore.</param>
            <param name="user">User.</param>
            <param name="password">Password in plain text format.</param>
        </member>
        <member name="M:Kentico.Membership.KenticoUserManager`1.GenerateEmailConfirmationTokenAsync(System.Int32)">
            <summary>
            Gets the email confirmation token for the registered user.
            </summary>
            <param name="userId">User ID</param>
        </member>
        <member name="M:Kentico.Membership.KenticoUserManager`1.UpdateSecurityStampInternal(`0)">
            <summary>
            Updates the security stamp if the store supports it.
            </summary>
            <param name="user">User whose stamp should be updated.</param>
        </member>
        <member name="T:Kentico.Membership.UserManager">
            <summary>
            Exposes user related API which will automatically save changes to the <see cref="T:Kentico.Membership.UserStore"/>.
            </summary>
        </member>
        <member name="M:Kentico.Membership.UserManager.#ctor(Microsoft.AspNet.Identity.IUserStore{Kentico.Membership.User,System.Int32})">
            <summary>
            Creates a new instance of <see cref="T:Kentico.Membership.UserManager"/>.
            </summary>
            <param name="store">User store.</param>
        </member>
        <member name="T:Kentico.Membership.KenticoUserStore`1">
            <summary>
            <para>
            Implements basic user management operations.
            </para>
            <para>
            This class was added in hotfix 34 (version 12.0.34). Do not use this class when writing hotfix independent code.
            </para>
            </summary>
        </member>
        <member name="P:Kentico.Membership.KenticoUserStore`1.SiteID">
            <summary>
            Returns <see cref="P:CMS.SiteProvider.SiteInfo.SiteID"/> that belongs to <see cref="T:CMS.SiteProvider.SiteInfo"/> managed by <see cref="T:Kentico.Membership.KenticoUserStore`1"/>.
            </summary>
        </member>
        <member name="M:Kentico.Membership.KenticoUserStore`1.#ctor(System.String)">
            <summary>
            Creates store to manage users for given site.
            </summary>
            <param name="siteName">Site name that represents <see cref="T:CMS.SiteProvider.SiteInfo"/> for which users are managed.</param>
        </member>
        <member name="M:Kentico.Membership.KenticoUserStore`1.CreateAsync(`0)">
            <summary>
            Inserts new user to the database.
            </summary>
            <param name="user">User.</param>
        </member>
        <member name="M:Kentico.Membership.KenticoUserStore`1.DeleteAsync(`0)">
            <summary>
            Deletes the user.
            </summary>
            <param name="user">User.</param>
        </member>
        <member name="M:Kentico.Membership.KenticoUserStore`1.FindByIdAsync(System.Int32)">
            <summary>
            Finds the user by user's ID.
            </summary>
            <param name="userId">User ID.</param>
        </member>
        <member name="M:Kentico.Membership.KenticoUserStore`1.FindByNameAsync(System.String)">
            <summary>
            Finds the user by user's username.
            </summary>
            <param name="userName">Username.</param>
        </member>
        <member name="M:Kentico.Membership.KenticoUserStore`1.UpdateAsync(`0)">
            <summary>
            Updates a user.
            </summary>
            <param name="user">User.</param>
        </member>
        <member name="M:Kentico.Membership.KenticoUserStore`1.Dispose">
            <summary>
            Performs tasks to dispose the user store.
            </summary>
        </member>
        <member name="M:Kentico.Membership.KenticoUserStore`1.Dispose(System.Boolean)">
            <summary>
            Disposes the user store.
            </summary>
            <param name="disposing">Describes whether or not should the managed resources be disposed.</param>
        </member>
        <member name="M:Kentico.Membership.KenticoUserStore`1.GetPasswordHashAsync(`0)">
            <summary>
            Gets the password hash for the user.
            </summary>
            <param name="user">User.</param>
        </member>
        <member name="M:Kentico.Membership.KenticoUserStore`1.HasPasswordAsync(`0)">
            <summary>
            Returns true if the user has the password set.
            </summary>
            <param name="user">User.</param>
        </member>
        <member name="M:Kentico.Membership.KenticoUserStore`1.SetPasswordHashAsync(`0,System.String)">
            <summary>
            Sets the password hash for the user.
            </summary>
            <param name="user">User.</param>
            <param name="passwordHash">Password hash.</param>
        </member>
        <member name="M:Kentico.Membership.KenticoUserStore`1.GetAccessFailedCountAsync(`0)">
            <summary>
            Returns the current number of failed access attempts.
            </summary>
            <param name="user">User.</param>
        </member>
        <member name="M:Kentico.Membership.KenticoUserStore`1.GetLockoutEnabledAsync(`0)">
            <summary>
            Returns whether the user can be locked out.
            </summary>
            <param name="user">User.</param>
        </member>
        <member name="M:Kentico.Membership.KenticoUserStore`1.GetLockoutEndDateAsync(`0)">
            <summary>
            Returns the DateTimeOffset that represents the end of the user's lockout, any time
            in the past should be considered not locked out.
            </summary>
            <param name="user">User.</param>
        </member>
        <member name="M:Kentico.Membership.KenticoUserStore`1.IncrementAccessFailedCountAsync(`0)">
            <summary>
            Used to record when an attempt to access the user has failed.
            </summary>
            <param name="user">User.</param>
        </member>
        <member name="M:Kentico.Membership.KenticoUserStore`1.ResetAccessFailedCountAsync(`0)">
            <summary>
            Used to reset the access failed count, typically after the account is successfully accessed.
            </summary>
            <param name="user">User.</param>
        </member>
        <member name="M:Kentico.Membership.KenticoUserStore`1.SetLockoutEnabledAsync(`0,System.Boolean)">
            <summary>
            Sets whether the user can be locked out.
            </summary>
            <param name="user">User.</param>
            <param name="enabled">Whether the user can be locked out.</param>
        </member>
        <member name="M:Kentico.Membership.KenticoUserStore`1.SetLockoutEndDateAsync(`0,System.DateTimeOffset)">
            <summary>
            Locks a user out until the specified end date (set to a past date, to unlock a user).
            </summary>
            <param name="user">User.</param>
            <param name="lockoutEnd">DateTimeOffset that represents the end of a user's lockout.</param>
        </member>
        <member name="M:Kentico.Membership.KenticoUserStore`1.GetTwoFactorEnabledAsync(`0)">
            <summary>
            Returns whether two factor authentication is enabled for the user.
            </summary>
            <param name="user">User.</param>
            <remarks>Not enabled in current implementation.</remarks>
        </member>
        <member name="M:Kentico.Membership.KenticoUserStore`1.SetTwoFactorEnabledAsync(`0,System.Boolean)">
            <summary>
            Sets whether two factor authentication is enabled for the user.
            </summary>
            <param name="user">User.</param>
            <param name="enabled">Whether users should go through two-factor authentication.</param>
            <remarks>Not used in current implementation.</remarks>
        </member>
        <member name="M:Kentico.Membership.KenticoUserStore`1.GetRolesAsync(`0)">
            <summary>
            Returns all role names for the given user.
            </summary>
            <param name="user">User entity.</param>
            <returns>List of role names.</returns>
        </member>
        <member name="M:Kentico.Membership.KenticoUserStore`1.IsInRoleAsync(`0,System.String)">
            <summary>
            Checks whether user is in role with given role name.
            </summary>
            <param name="user">User entity.</param>
            <param name="roleName">Role name.</param>
            <returns>True if user is in role, false otherwise.</returns>
        </member>
        <member name="M:Kentico.Membership.KenticoUserStore`1.RemoveFromRoleAsync(`0,System.String)">
            <summary>
            Removes user from <see cref="T:Kentico.Membership.Role"/>.
            </summary>
            <param name="user">User entity.</param>
            <param name="roleName">Role name.</param>
        </member>
        <member name="M:Kentico.Membership.KenticoUserStore`1.AddToRoleAsync(`0,System.String)">
            <summary>
            Adds user to <see cref="T:Kentico.Membership.Role"/>.
            </summary>
            <param name="user">User entity.</param>
            <param name="roleName">Role name.</param>
        </member>
        <member name="M:Kentico.Membership.KenticoUserStore`1.SetEmailAsync(`0,System.String)">
            <summary>
            Sets the user email.
            </summary>
            <param name="user">User.</param>
            <param name="email">Email.</param>
        </member>
        <member name="M:Kentico.Membership.KenticoUserStore`1.GetEmailAsync(`0)">
            <summary>
            Gets the user email.
            </summary>
            <param name="user">User.</param>
        </member>
        <member name="M:Kentico.Membership.KenticoUserStore`1.GetEmailConfirmedAsync(`0)">
            <summary>
            Returns true if the user email is confirmed.
            </summary>
            <param name="user">User.</param>
        </member>
        <member name="M:Kentico.Membership.KenticoUserStore`1.SetEmailConfirmedAsync(`0,System.Boolean)">
            <summary>
            Enables user if her email was confirmed.
            </summary>
            <param name="user">User.</param>
            <param name="confirmed">Indicates if the user email is confirmed.</param>
        </member>
        <member name="M:Kentico.Membership.KenticoUserStore`1.FindByEmailAsync(System.String)">
            <summary>
            Returns the user associated with the given email.
            </summary>
            <param name="email">Email.</param>
        </member>
        <member name="M:Kentico.Membership.KenticoUserStore`1.AddLoginAsync(`0,Microsoft.AspNet.Identity.UserLoginInfo)">
            <summary>
            Adds external login to user.
            </summary>
            <param name="user">User.</param>
            <param name="login">External login information.</param>
        </member>
        <member name="M:Kentico.Membership.KenticoUserStore`1.RemoveLoginAsync(`0,Microsoft.AspNet.Identity.UserLoginInfo)">
            <summary>
            Removes external login to user.
            </summary>
            <param name="user">User.</param>
            <param name="login">External login information.</param>
        </member>
        <member name="M:Kentico.Membership.KenticoUserStore`1.GetLoginsAsync(`0)">
            <summary>
            Returns all external logins of user.
            </summary>
            <param name="user">User.</param>
        </member>
        <member name="M:Kentico.Membership.KenticoUserStore`1.FindAsync(Microsoft.AspNet.Identity.UserLoginInfo)">
            <summary>
            Returns user based on given external login.
            </summary>
            <param name="login">External login information.</param>
        </member>
        <member name="M:Kentico.Membership.KenticoUserStore`1.SetSecurityStampAsync(`0,System.String)">
            <summary>
            Sets user's security stamp.
            </summary>
            <param name="user">User to which stamp should be assigned.</param>
            <param name="stamp">Stamp to be assigned.</param>
        </member>
        <member name="M:Kentico.Membership.KenticoUserStore`1.GetSecurityStampAsync(`0)">
            <summary>
            Returns user's security stamp.
            </summary>
            <param name="user">User whose stamp should be returned.</param>
        </member>
        <member name="T:Kentico.Membership.UserStore">
            <summary>
            Implements basic user management operations.
            </summary>
        </member>
        <member name="M:Kentico.Membership.UserStore.#ctor(System.String)">
            <summary>
            Creates store to manage users for given site.
            </summary>
            <param name="siteName">Site name that represents <see cref="T:CMS.SiteProvider.SiteInfo"/> for which users are managed.</param>
        </member>
    </members>
</doc>
