
@{
    ViewBag.Title = "UpdateMyAddress";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@model PrintForMe.Models.Checkout.BillingAddressViewModel

<style>
    .add-address-form {
        width: 100%;
    }
</style>
<div class="checkout-page-content-wrapper">
    <div class="container">
        <div class="shipping-info-container">
            <div class="row">
                <div class="col-md-6">
                    <div class="add-address-wrapper">
                        <div class="add-address-form ">
                            @using (Html.BeginForm("UpdateMyAddress", "Address", FormMethod.Post, new { id = "UpdateMyAddressForm" }))
                            {
                                <div id="billingAddress" data-addresstype='BillingAddress' data-fields='["Line1", "Line2", "City", "PostalCode", "MainAddress"]'>
                                    <h3> Update Address </h3>
                                    @Html.HiddenFor(m => m.AddressID)
                                    @Html.HiddenFor(m => m.AddressName)
                                    <div class="form-field">
                                        @Html.LabelFor(m => m.PersonalName)
                                        @Html.EditorFor(m => m.PersonalName)
                                    </div>
                                    <div class="form-field">
                                        @Html.LabelFor(m => m.Phone)
                                        @Html.EditorFor(m => m.Phone)
                                    </div>
                                    <div class="form-field">
                                        @Html.LabelFor(m => m.City)
                                        @Html.EditorFor(m => m.City)
                                    </div>
                                    <div class="form-field">
                                        @Html.LabelFor(m => m.Line1)
                                        @Html.EditorFor(m => m.Line1)
                                    </div>
                                    <div class="form-field">
                                        @Html.LabelFor(m => m.Line2)
                                        @Html.EditorFor(m => m.Line2)
                                    </div>
                                    <div class="form-field">
                                        @Html.LabelFor(m => m.PostalCode)
                                        @Html.EditorFor(m => m.PostalCode)
                                    </div>
                                    <div class="form-field">
                                        @if (Model != null)
                                        {
                                            <div class="js-country-state-selector" data-statelistaction='@Url.Action("CountryStates", "Checkout")' data-countryselectedid='@Model.CountryID' data-stateselectedid='@Model.StateID' data-countryfield='CountryID' data-statefield='StateID'>
                                                @Html.LabelFor(m => m.CountryID)
                                                @Html.DropDownListFor(m => m.CountryID, Model.Countries, new { @class = "js-country-selector" })
                                                <div class="js-state-selector-container">
                                                    @Html.LabelFor(m => m.StateID)
                                                    @Html.DropDownListFor(m => m.StateID, Enumerable.Empty<SelectListItem>(), new { @class = "js-state-selector" })
                                                </div>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="js-country-state-selector" data-countryfield='CountryID' data-statefield='StateID'>
                                                @Html.LabelFor(m => m.CountryID)
                                                @Html.DropDownListFor(m => m.CountryID, Model.Countries, new { @class = "js-country-selector" })
                                                <div class="js-state-selector-container">
                                                    @Html.LabelFor(m => m.StateID)
                                                    @Html.DropDownListFor(m => m.StateID, Enumerable.Empty<SelectListItem>(), new { @class = "js-state-selector" })
                                                </div>
                                            </div>
                                        }
                                    </div>
                                    <div>
                                        @Html.LabelFor(m => m.MainAddress)
                                        @Html.EJS().CheckBoxFor(m => m.MainAddress).Render()
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <input type="hidden" id="LocationLatitude" />
                    <input type="hidden" id="LocationLongitude" />
                    <input id="pc-input" style="width: 250px; height: 25px;" />
                    <div id="dvMap" style="width: 100%; height: 380px;"></div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <div class="select-address-submit">
                        <input type="submit" class="text-center dark-button-bg m-1" form="UpdateMyAddressForm" value="Update">
                    </div>
                </div>
            </div>

        </div>
    </div>
</div>


<script src="~/Scripts/jquery-2.1.4.min.js"></script>
<script src="~/Scripts/countryStateSelector.js"></script>
<script src="~/Scripts/addressSelector.js"></script>
<script type="text/javascript">
    var street_name = "";
    var postal_code = "";
    var country = "";
    var region = "";
    var city = "";
    var district = "";
    var totalData;
    // var regionObj = document.getElementById('SchoolRegionID').ej2_instances[0];
    function InitializeMap() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (p) {
                var LatLng = new google.maps.LatLng(p.coords.latitude, p.coords.longitude);
                var input = document.getElementById('pc-input');

                var mapOptions = {
                    center: LatLng,
                    zoom: 17,
                    mapTypeId: google.maps.MapTypeId.ROADMAP,
                };
                var map = new google.maps.Map(document.getElementById("dvMap"), mapOptions);
                var geocoder = new google.maps.Geocoder();
                var autocomplete = new google.maps.places.Autocomplete(input);
                map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
                marker = new google.maps.Marker({
                    map: map,
                    position: LatLng,
                    draggable: true
                });
                //geocodeLatLng(geocoder, map);

                autocomplete.addListener('place_changed', function () {
                    marker.setVisible(false);
                    var place = autocomplete.getPlace();
                    if (!place.geometry) {
                        // User entered the name of a Place that was not suggested and
                        // pressed the Enter key, or the Place Details request failed.
                        window.alert("No details available for input: '" + place.name + "'");
                        return;
                    }
                    // If the place has a geometry, then present it on a map.
                    if (place.geometry.viewport) {
                        map.fitBounds(place.geometry.viewport);
                    } else {
                        map.setCenter(place.geometry.location);
                        map.setZoom(17);  // Why 17? Because it looks good.
                    }
                    marker.setPosition(place.geometry.location);
                    marker.setVisible(true);
                    // geocodeLatLng(geocoder, map);

                });
                document.getElementById("LocationLatitude").value = marker.getPosition().lat();
                document.getElementById("LocationLongitude").value = marker.getPosition().lng();
                google.maps.event.addListener(marker, 'dragend', function () {
                    console.log("Inside event code");
                    geocoder.geocode({ 'location': marker.getPosition() }, function (results, status) {
                        document.getElementById("LocationLatitude").value = marker.getPosition().lat();
                        document.getElementById("LocationLongitude").value = marker.getPosition().lng();
                        map.panTo(marker.getPosition());

                        let AddressLine1 = document.getElementById('Line1');
                        let AddressCity = document.getElementById("City");
                        let AddressPostalcode = document.getElementById("PostalCode");
                        let countrySelector = document.getElementById("CountryID");

                        if (status == 'OK') {
                            if (results[0]) {
                                console.log(results[0]);
                                map.setZoom(17);

                                for (i = 0; i < results[0].address_components.length; i++) {
                                    if (results[0].address_components[i].types[0] == "premise")
                                        street_name = results[0].address_components[i].long_name;
                                    else if (results[0].address_components[i].types[0] == "street_number")
                                        street_name = results[0].address_components[i].long_name;
                                    else if (results[0].address_components[i].types[0] == "route")
                                        street_name = street_name + " " + results[0].address_components[i].long_name;
                                    else if (results[0].address_components[i].types[0] == "country")
                                        country = results[0].address_components[i].long_name;
                                    else if (results[0].address_components[i].types[0] == "postal_code")
                                        postal_code = results[0].address_components[i].long_name;
                                    else if (results[0].address_components[i].types[0] == "locality")
                                        city = results[0].address_components[i].long_name;
                                    else if (results[0].address_components[i].types[0] == "administrative_area_level_1")
                                        region = results[0].address_components[i].long_name;
                                    else if (results[0].address_components[i].types[0] == "political")
                                        district = results[0].address_components[i].long_name;
                                }

                                AddressLine1.value = results[0].formatted_address;
                                AddressCity.value = city;
                                AddressPostalcode.value = postal_code;
                                let countryID = getCountryId(countrySelector, country);
                                if (countryID != 0) {
                                    countrySelector.value = countryID;
                                    SetCountrySelector($('.js-country-selector'));
                                }

                            }
                        }

                    });
                });

            });
        } else {
            alert('Geo Location feature is not supported in this browser.');
        }
    }

    function getCountryId(countryOptions, country) {
        let value = 0;
        for (let option of countryOptions) {
            if (option.text == country) {
                value = option.value;
                break;
            }
        }
        return value;
    }
    var SetCountrySelector = function (selector) {
        var $countrySelector = selector,
            $countryStateSelector = $countrySelector.parent('.js-country-state-selector'),
            $stateSelector = $countryStateSelector.find('.js-state-selector'),
            $stateSelectorContainer = $countryStateSelector.find('.js-state-selector-container'),
            selectedStateId = $countryStateSelector.data('stateselectedid'),
            url = $countryStateSelector.data('statelistaction'),
            postData = {
                countryId: $countrySelector.val()
            };

        $stateSelectorContainer.hide();

        if (!postData.countryId) {
            return;
        }

        // Sends a POST request to the 'CountryStates' endpoint of the 'CheckoutController'
        $.post(url, postData, function (data) {
            $countryStateSelector.data('stateselectedid', 0);
            $stateSelector.val(null);

            if (!data.length) {
                return;
            }

            // Fills and shows the state selector element
            fillStateSelector($stateSelector, data);
            $stateSelectorContainer.show();

            if (selectedStateId > 0) {
                $stateSelector.val(selectedStateId);
            }
        });
    }
    function geocodeLatLng(geocoder, map) {
        var latlng = { lat: parseFloat(document.getElementById("LocationLatitude").value), lng: parseFloat(document.getElementById("LocationLongitude").value) };
        geocoder.geocode({ 'location': marker.getPosition() }, function (results, status) {
            console.log("inside geocode code");

            let AddressLine1 = document.getElementById('Line1');
            let AddressCity = document.getElementById("City");
            let AddressPostalcode = document.getElementById("PostalCode");
            let countrySelector = document.getElementById("CountryID");

            if (status == 'OK') {
                if (results[0]) {
                    console.log(results[0]);
                    map.setZoom(17);
                    document.getElementById("LocationLatitude").value = marker.getPosition().lat();
                    document.getElementById("LocationLongitude").value = marker.getPosition().lng();
                    for (i = 0; i < results[0].address_components.length; i++) {
                        if (results[0].address_components[i].types[0] == "premise")
                            street_name = results[0].address_components[i].long_name;
                        else if (results[0].address_components[i].types[0] == "street_number")
                            street_name = results[0].address_components[i].long_name;
                        else if (results[0].address_components[i].types[0] == "route")
                            street_name = street_name + " " + results[0].address_components[i].long_name;
                        else if (results[0].address_components[i].types[0] == "country")
                            country = results[0].address_components[i].long_name;
                        else if (results[0].address_components[i].types[0] == "postal_code")
                            postal_code = results[0].address_components[i].long_name;
                        else if (results[0].address_components[i].types[0] == "locality")
                            city = results[0].address_components[i].long_name;
                        else if (results[0].address_components[i].types[0] == "administrative_area_level_1")
                            region = results[0].address_components[i].long_name;
                        else if (results[0].address_components[i].types[0] == "political")
                            district = results[0].address_components[i].long_name;
                    }

                    AddressLine1.value = results[0].formatted_address;
                    AddressCity.value = city;
                    AddressPostalcode.value = postal_code;
                    let countryID = getCountryId(countrySelector, country);
                    if (countryID != 0) {
                        countrySelector.value = countryID;
                        SetCountrySelector($('.js-country-selector'));
                    }

                }
            }
        });
    }
</script>
<script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBJcV5tnsekUS4pwV4HlbuKeddRnz4yB0s&libraries=places&callback=InitializeMap"></script>


